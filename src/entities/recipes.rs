//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recipes")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub instagram_id: String,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub raw_description: String,
    pub ingredients: Vec<String>,
    pub instructions: Vec<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub info_json: Option<Json>,
    #[sea_orm(column_type = "Text", nullable)]
    pub instagram_url: Option<String>,
    pub updated_at: DateTimeWithTimeZone,
    pub transcript_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::transcript::Entity",
        from = "Column::TranscriptId",
        to = "super::transcript::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Transcript,
}

impl Related<super::transcript::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transcript.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
